name: Deploy web + api to Azure

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: 22

defaults:
  run:
    working-directory: avans-keuzekompas

jobs:
  build-and-deploy-api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: avans-keuzekompas/package-lock.json

      - run: npm ci --legacy-peer-deps

      - name: Build backend libs
        run: npx nx run-many --target=build --projects=backend-domain,backend-infrastructure,backend-application,backend-presentation --configuration=production --no-cloud

      - name: Build API (NestJS)
        run: npx nx run api:build --configuration=production --no-cloud

      - name: Backup generated API package.json (pre-prune)
        run: |
          cp apps/backend/dist/package.json apps/backend/dist/package.generated.json

      - name: Prune lockfile and copy workspace modules for API
        run: npx nx run api:prune --no-cloud

      - name: Restore dependencies into pruned package.json
        run: |
          cd apps/backend/dist
          # Merge back dependencies from the generated package.json into the pruned one
          jq -s '.[0] as $pruned | .[1] as $gen | $pruned | .dependencies = ($gen.dependencies // {})' package.json package.generated.json > package.json.tmp
          mv package.json.tmp package.json

      # - name: Copy runtime dependencies and built libs to dist
      #   run: |
      #     cp package.json apps/backend/dist/
      #     cp package-lock.json apps/backend/dist/
      #     mkdir -p apps/backend/dist/libs
      #     cp -r dist/libs/* apps/backend/dist/libs/ || true
      #     cd apps/backend/dist
      #     npm ci --omit=dev --legacy-peer-deps

      - name: Install production deps in API dist (use pruned lockfile)
        run: |
          cd apps/backend/dist
          cat package.json
          # Use the pruned package-lock.json produced by Nx to install workspace modules
          npm ci --omit=dev --legacy-peer-deps

      - name: Verify runtime modules exist in API dist
        run: |
          cd apps/backend/dist
          node -e "require.resolve('@nestjs/common'); require.resolve('@avans-keuzekompas/infrastructure'); console.log('Deps OK')"
          node -e "console.log('@nestjs/common version:', require('./node_modules/@nestjs/common/package.json').version)"
          if [ -d node_modules/@avans-keuzekompas/infrastructure ]; then echo "Found @avans-keuzekompas/infrastructure"; else echo "Missing @avans-keuzekompas/infrastructure"; fi

      - name: Ensure start scripts in API dist package.json
        run: |
          cd apps/backend/dist
          # Add both start and start:api for compatibility with App Service settings
          jq '.scripts = (.scripts // {})
            | .scripts.start = "node -e \"try{require.resolve(\\\"@nestjs/common\\\")}catch(e){process.exit(1)}\" || npm ci --omit=dev --legacy-peer-deps; node main.js"
            | .scripts["start:api"] = "node -e \"try{require.resolve(\\\"@nestjs/common\\\")}catch(e){process.exit(1)}\" || npm ci --omit=dev --legacy-peer-deps; node main.js"' package.json > package.json.tmp
          mv package.json.tmp package.json

      - name: Toon package.json en inhoud dist-map (debug)
        run: |
          echo "---- package.json ----"
          cat apps/backend/dist/package.json
          echo "---- inhoud dist ----"
          ls -l apps/backend/dist

      - name: Zip API artifact
        run: |
          cd apps/backend/dist
          zip -r "$GITHUB_WORKSPACE/api.zip" .
        shell: bash

      - name: Deploy API to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          publish-profile: ${{ secrets.AZURE_API_PUBLISH_PROFILE }}
          package: ${{ github.workspace }}/api.zip

  build-and-deploy-web:
    needs: build-and-deploy-api
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: avans-keuzekompas/package-lock.json

      - run: npm ci --legacy-peer-deps

      - name: Build Web (Next.js)
        run: npx nx run web:build --configuration=production --no-cloud

      - name: Prepare Next.js deploy folder (standalone)
        run: |
          set -e
          rm -rf frontend-deploy
          mkdir -p frontend-deploy
          cp -R apps/frontend/.next/standalone/* frontend-deploy/
          mkdir -p frontend-deploy/apps/frontend/.next
          cp -R apps/frontend/.next/static frontend-deploy/apps/frontend/.next/static
          cp -R apps/frontend/public frontend-deploy/apps/frontend/public || true

      - name: Create Web package.json with correct start script
        run: |
          jq '.scripts.start="node server.js"' package.json > frontend-deploy/package.json
          cp package-lock.json frontend-deploy/
          cd frontend-deploy
          npm ci --omit=dev --legacy-peer-deps

      - name: Zip Web artifact
        run: |
          cd frontend-deploy
          zip -r "$GITHUB_WORKSPACE/web.zip" .
        shell: bash

      - name: Deploy Web to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          publish-profile: ${{ secrets.AZURE_WEB_PUBLISH_PROFILE }}
          package: ${{ github.workspace }}/web.zip
