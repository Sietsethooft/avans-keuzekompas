name: Deploy web + api to Azure

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: 22

defaults:
  run:
    working-directory: avans-keuzekompas

jobs:
  build-and-deploy-api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: avans-keuzekompas/package-lock.json

      - run: npm ci --legacy-peer-deps

      - name: Build API (NestJS)
        run: npx nx run api:build --configuration=production --no-cloud

      - name: Zip API artifact
        run: |
          cd apps/backend/dist
          zip -r "$GITHUB_WORKSPACE/api.zip" .
        shell: bash

      - name: Deploy API to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          publish-profile: ${{ secrets.AZURE_API_PUBLISH_PROFILE }}
          package: ${{ github.workspace }}/api.zip
          # startup-command is not supported on Windows or with publish-profile; use web.config instead

  build-and-deploy-web:
    needs: build-and-deploy-api
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: avans-keuzekompas/package-lock.json

      - run: npm ci --legacy-peer-deps

      - name: Build Web (Next.js)
        run: npx nx run web:build --configuration=production --no-cloud

      - name: Prepare Next.js deploy folder (standalone)
        run: |
          set -e
          rm -rf frontend-deploy
          mkdir -p frontend-deploy
          # Copy the self-contained server bundle created by `output: 'standalone'`
          # This will place the monorepo-replicated tree (e.g., apps/frontend/server.js) under frontend-deploy/
          cp -R apps/frontend/.next/standalone/* frontend-deploy/
          # Ensure static assets are placed where the server expects them
          mkdir -p frontend-deploy/apps/frontend/.next
          cp -R apps/frontend/.next/static frontend-deploy/apps/frontend/.next/static
          # Public assets (if referenced directly)
          cp -R apps/frontend/public frontend-deploy/apps/frontend/public || true
          # Generate web.config for Windows App Service to start the Next.js server via iisnode
          cat > frontend-deploy/web.config << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="apps/frontend/server.js" verb="*" modules="iisnode" />
              </handlers>
              <rewrite>
                <rules>
                  <rule name="StaticContent">
                    <action type="None" />
                  </rule>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
                    </conditions>
                    <action type="Rewrite" url="apps/frontend/server.js" />
                  </rule>
                </rules>
              </rewrite>
              <httpErrors existingResponse="PassThrough" />
              <iisnode nodeProcessCommandLine="%ProgramFiles%\\nodejs\\node.exe" />
            </system.webServer>
          </configuration>
          EOF
        shell: bash

      - name: Zip Web artifact
        run: zip -r "$GITHUB_WORKSPACE/web.zip" frontend-deploy
        shell: bash

      - name: Deploy Web to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          publish-profile: ${{ secrets.AZURE_WEB_PUBLISH_PROFILE }}
          package: ${{ github.workspace }}/web.zip
          # startup-command is not supported on Windows or with publish-profile; use web.config instead
